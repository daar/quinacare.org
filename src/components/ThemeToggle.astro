---
// No props needed
export const prerender = false; // Ensure client-side execution
---

<button id="theme-toggle" class="p-2 focus:outline-none transition-transform transform hover:scale-110" aria-label="Toggle theme">
    <!-- Sun/Moon SVG -->
    <svg id="theme-icon" class="w-5 h-5 transition-all duration-500 ease-in-out" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <!-- Sun Icon -->
      <g id="sun-icon" class="opacity-100 scale-100 transition-all duration-500 ease-in-out">
        <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="1.5" fill="none"/>
        <g stroke="currentColor" stroke-width="1.5" stroke-linecap="round">
          <line x1="12" y1="2" x2="12" y2="5"/>
          <line x1="12" y1="19" x2="12" y2="22"/>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
          <line x1="2" y1="12" x2="5" y2="12"/>
          <line x1="19" y1="12" x2="22" y2="12"/>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
        </g>
      </g>
      <!-- Moon Icon -->
      <g id="moon-icon" class="opacity-0 scale-75 transition-all duration-500 ease-in-out">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" 
              stroke="currentColor" stroke-width="1.5" fill="none"/>
      </g>
    </svg>
</button>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const themeToggle = document.getElementById("theme-toggle");
    const sunIcon = document.getElementById("sun-icon");
    const moonIcon = document.getElementById("moon-icon");
    const htmlElement = document.documentElement; // Apply dark mode to the root element

    function setTheme(mode) {
      if (mode === "dark") {
        htmlElement.classList.add("dark");
        localStorage.setItem("darkMode", "enabled");
        sunIcon.classList.add("opacity-0", "scale-75");
        sunIcon.classList.remove("opacity-100", "scale-100");
        moonIcon.classList.remove("opacity-0", "scale-75");
        moonIcon.classList.add("opacity-100", "scale-100");
      } else {
        htmlElement.classList.remove("dark");
        localStorage.setItem("darkMode", "disabled");
        sunIcon.classList.remove("opacity-0", "scale-75");
        sunIcon.classList.add("opacity-100", "scale-100");
        moonIcon.classList.add("opacity-0", "scale-75");
        moonIcon.classList.remove("opacity-100", "scale-100");
      }
    }

    // Detect system preference or saved theme
    const userPrefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const savedTheme = localStorage.getItem("darkMode");

    if (savedTheme === "enabled" || (!savedTheme && userPrefersDark)) {
      setTheme("dark");
    } else {
      setTheme("light");
    }

    // Toggle theme on button click
    themeToggle.addEventListener("click", () => {
      if (htmlElement.classList.contains("dark")) {
        setTheme("light");
      } else {
        setTheme("dark");
      }
    });

    // Watch for system theme changes
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
      setTheme(e.matches ? "dark" : "light");
    });
  });
</script>

<!-- Dark Mode Styling -->
<style>
  /* Apply theme to the root element */
  html {
    --bg-light: white;
    --text-light: black;
    --bg-dark: #1a202c;
    --text-dark: white;
    background-color: var(--bg-light);
    color: var(--text-light);
    transition: background-color 0.4s ease, color 0.4s ease;
  }

  .dark {
    background-color: var(--bg-dark);
    color: var(--text-dark);
  }

  /* Ensure everything updates */
  body, button, input {
    transition: background-color 0.4s ease, color 0.4s ease;
  }

  /* Change default element styles in dark mode */
  .dark button {
    background-color: #2d3748;
    color: white;
  }

  .dark input {
    background-color: #2d3748;
    color: white;
    border-color: #4a5568;
  }
</style>
